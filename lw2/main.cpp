/*
21.
Теннисный турнир проходит по олимпийской системе с выбываниями. Известен рейтинг каждого игрока.
Результаты турнира записаны с помощью дерева. Первоначально задается только список участников,
которым соответствуют листья дерева.
Требуется предложить принцип проведения турнира (выбор пар участников, организация предварительных туров, распределение
или посев сильнейших игроков так, чтобы они не встречались в начале турнира и т.п.), показать в наглядном виде дерево
проведенного турнира, выдать список сенсаций турнира, когда побеждал игрок с низшим рейтингом. Определить самый
сенсационный результат по максимальной разнице рейтингов.
*/
//Ошаев Олег CLion (12 баллов)

#include <iostream>
#include <fstream>

#include "funcs.h"


int main()
{
    // Установка кодировки в консоли Windows для корректного вывода кириллицы.
    system("chcp 1251 > nul");

    // Путь к входному файлу.
    const std::string input_filename = "data_table.txt";

    // Открытие входного файла.
    std::ifstream fin(input_filename, std::ios::in);

    // Если ошибка открытия файла, то завершаем программу.
    if (!fin)
    {
        std::cerr << "Ошибка открытия файла " << input_filename << ".\n";

        // Ожидание нажатия клавиши перед завершением работы программы.
        system("pause");

        return 1;
    }

    // Количество игроков.
    int n;
    fin >> n;
    // Массив игроков.
    TPlayer* players = new TPlayer[n];
    
    // Считываем записи.
    for (int i = 0; i < n; i++)
    {
        fin >> players[i].name;
        fin >> players[i].score;
    }

    // Закрытие входного файла.
    fin.close();

    // Псевдослучайная сортировка массива игроков.
    random_shuffle(players, n);

    std::cout << "Количество участников теннисного турнира: " << n
        << std::endl << std::endl;

    // Создание таблицы турнира на основе дерева.
    TNode* root = create_table_of_tournament(n);


    print_node("", root, players);

    std::cout << std::endl << std::endl;

    // Вывод результатов работы.
    print_result(root, players, n);

    // Очистка памяти (удаление узлов дерева).
    freemem_of_tree(root);
    // Удаление игроков.
    delete[] players;

    // Ожидание нажатия клавиши перед завершением работы программы.
    system("pause");

    return 0;
}
